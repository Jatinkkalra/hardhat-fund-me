{
  "address": "0x0eC7C4b1601b52ad2478a7EAd7a6A5309fbD4Cfe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundUSD",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x51e020e3b2e460cc3ed12e3525bb7243c59edaa59e03ef3acee7ae46917e72c5",
  "receipt": {
    "to": null,
    "from": "0x65fa73eFAEcfa785B08808a94ecBB1422Bb64fE4",
    "contractAddress": "0x0eC7C4b1601b52ad2478a7EAd7a6A5309fbD4Cfe",
    "transactionIndex": 10,
    "gasUsed": "831680",
    "logsBloom": "0x
    "blockHash": "0xf504c818a50c177e94adf7b36fe1a45c93fc2e97ecf71e132edf76240e0df5d7",
    "transactionHash": "0x51e020e3b2e460cc3ed12e3525bb7243c59edaa59e03ef3acee7ae46917e72c5",
    "logs": [],
    "blockNumber": 3202532,
    "cumulativeGasUsed": "1231447",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "4a42c66c63f0e626935211e772669fb6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundUSD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMeWithLibrary.sol\":\"FundMeWithLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMeWithLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// Objective:\\n// 1.\\n\\n// Notes:\\n// A.\\n\\nimport \\\"./PriceConverter(ALibrary).sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMeWithLibrary {\\n    address public immutable i_Owner;\\n\\n    AggregatorV3Interface public priceFeed; // Global variable\\n\\n    constructor(address priceFeedAddress) {\\n        //PriceFeedAddress paramater to easily change chains\\n        i_Owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    using PriceConverter for uint256;\\n\\n    address[] public funders; // Array(1/2)\\n    mapping(address => uint256) public addressToAmountFunded; // Mapping(1/2)\\n\\n    uint256 public constant MINIMUM_USD = 50;\\n\\n    function fundUSD() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Minimum is 50 USD!\\\"\\n        );\\n        funders.push(msg.sender); // Array(2/2)\\n        addressToAmountFunded[msg.sender] += msg.value; // Mapping(2/2)\\n    }\\n\\n    receive() external payable {\\n        fundUSD();\\n    }\\n\\n    fallback() external payable {\\n        fundUSD();\\n    }\\n\\n    // 2. Withdraw funds\\n\\n    function withdraw() public onlyOwner {\\n        // Resetting mapping\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex = funderIndex++ /*ie funderIndex + 1*/\\n        ) {\\n            /* starting index, ending index, step amount */\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        // Resetting array (instead of looping and deleting, a complete refresh is done)\\n        funders = new address[](0);\\n\\n        // Withdraw the funds (3 ways to do)\\n\\n        (bool callSuccess /* bytes memory dataReturned */, ) = payable(\\n            msg.sender\\n        ).call{value: address(this).balance}(\\\"\\\"); // no data taken here\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // Modifier to ease-up owner process. 2(i)\\n    modifier onlyOwner() {\\n        if (msg.sender != i_Owner) {\\n            revert NotOwner();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdd2caf5ddc62e55adcd7d13c27cffd48f89cabb02d4a470d20f2469381541809\",\"license\":\"MIT\"},\"contracts/PriceConverter(ALibrary).sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// Objective:\\n// Acts as a library for \\\".contracts/FundMeWithLibrary.sol\\\"\\n// Refactoring to modularize our code to be chain-agnostic || `priceFeed` use in parameters\\n\\n// Notes:\\n// AggregatorV3interface is an interface which gets compiled down to an ABI\\n// AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306) is ABI and Address, which makes priceFeed a contract\\n// Global variables are set outside any function and can be called by other contracts via inheritance or library calls.\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    // To fetch the chainlink oracle price of ETH/USD Sepolia\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price / 1e10); // Price feed gives 10 decimal places || type-casting to uint256 for uniformity.\\n    }\\n\\n    // To convert msg.value in USD price\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Ex: 3000 = ETH/USD price; ethAmount = 2_000000000000000000 = 2*1e18\\n        uint256 ethPrice = getPrice(priceFeed); // 3000\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // (3000 * 2_000000000000000000) / 1e18\\n        return ethAmountInUsd; // 6000\\n    }\\n\\n    // just to check if the interface is imported correctly\\n    // function getPriceDecimals() internal view returns (uint256){\\n    //     // AggregatorV3Interface as a type here\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\\n    //     return priceFeed.decimals();\\n    // }\\n}\\n\",\"keccak256\":\"0x4c40aa5d7e11a2eb5309a366c60ab8b6c70ae19fd06a22e1029bff2c7e3dca1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f0b380380610f0b833981810160405281019061003291906100c4565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013f565b6000815190506100be81610128565b92915050565b6000602082840312156100da576100d9610123565b5b60006100e8848285016100af565b91505092915050565b60006100fc82610103565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610131816100f1565b811461013c57600080fd5b50565b60805160601c610da7610164600039600081816102dc015261059e0152610da76000f3fe6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a592146100eb578063741bef1a14610116578063dc0d3dff14610141578063e667b0bf1461017e57610083565b80632489cf531461008d5780633ccfd60b146100975780633e47d6f3146100ae57610083565b36610083576100816101a9565b005b61008b6101a9565b005b6100956101a9565b005b3480156100a357600080fd5b506100ac6102da565b005b3480156100ba57600080fd5b506100d560048036038101906100d091906107ac565b61051c565b6040516100e291906109a2565b60405180910390f35b3480156100f757600080fd5b50610100610534565b60405161010d91906109a2565b60405180910390f35b34801561012257600080fd5b5061012b610539565b6040516101389190610947565b60405180910390f35b34801561014d57600080fd5b50610168600480360381019061016391906107d9565b61055d565b604051610175919061092c565b60405180910390f35b34801561018a57600080fd5b5061019361059c565b6040516101a0919061092c565b60405180910390f35b60326101de60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b101561021f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021690610982565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d191906109d9565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561040c5760006001828154811061038557610384610c5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040390610bb6565b91509050610362565b50600067ffffffffffffffff81111561042857610427610c8c565b5b6040519080825280602002602001820160405280156104565781602001602082028036833780820191505090505b506001908051906020019061046c92919061069c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049390610917565b60006040518083038185875af1925050503d80600081146104d0576040519150601f19603f3d011682016040523d82523d6000602084013e6104d5565b606091505b5050905080610519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051090610962565b60405180910390fd5b50565b60026020528060005260406000206000915090505481565b603281565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061056d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806105cc836105fc565b90506000670de0b6b3a764000085836105e59190610aca565b6105ef9190610a99565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190610806565b5050509150506402540be400816106949190610a2f565b915050919050565b828054828255906000526020600020908101928215610715579160200282015b828111156107145782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106bc565b5b5090506107229190610726565b5090565b5b8082111561073f576000816000905550600101610727565b5090565b60008135905061075281610d15565b92915050565b60008151905061076781610d2c565b92915050565b60008135905061077c81610d43565b92915050565b60008151905061079181610d43565b92915050565b6000815190506107a681610d5a565b92915050565b6000602082840312156107c2576107c1610cbb565b5b60006107d084828501610743565b91505092915050565b6000602082840312156107ef576107ee610cbb565b5b60006107fd8482850161076d565b91505092915050565b600080600080600060a0868803121561082257610821610cbb565b5b600061083088828901610797565b955050602061084188828901610758565b945050604061085288828901610782565b935050606061086388828901610782565b925050608061087488828901610797565b9150509295509295909350565b61088a81610b24565b82525050565b61089981610b80565b82525050565b60006108ac600b836109c8565b91506108b782610cc0565b602082019050919050565b60006108cf6000836109bd565b91506108da82610ce9565b600082019050919050565b60006108f26012836109c8565b91506108fd82610cec565b602082019050919050565b61091181610b60565b82525050565b6000610922826108c2565b9150819050919050565b60006020820190506109416000830184610881565b92915050565b600060208201905061095c6000830184610890565b92915050565b6000602082019050818103600083015261097b8161089f565b9050919050565b6000602082019050818103600083015261099b816108e5565b9050919050565b60006020820190506109b76000830184610908565b92915050565b600081905092915050565b600082825260208201905092915050565b60006109e482610b60565b91506109ef83610b60565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a2457610a23610bff565b5b828201905092915050565b6000610a3a82610b36565b9150610a4583610b36565b925082610a5557610a54610c2e565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610a8e57610a8d610bff565b5b828205905092915050565b6000610aa482610b60565b9150610aaf83610b60565b925082610abf57610abe610c2e565b5b828204905092915050565b6000610ad582610b60565b9150610ae083610b60565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b1957610b18610bff565b5b828202905092915050565b6000610b2f82610b40565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610b8b82610b92565b9050919050565b6000610b9d82610ba4565b9050919050565b6000610baf82610b40565b9050919050565b6000610bc182610b60565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610bf457610bf3610bff565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b50565b7f4d696e696d756d20697320353020555344210000000000000000000000000000600082015250565b610d1e81610b24565b8114610d2957600080fd5b50565b610d3581610b36565b8114610d4057600080fd5b50565b610d4c81610b60565b8114610d5757600080fd5b50565b610d6381610b6a565b8114610d6e57600080fd5b5056fea2646970667358221220dd809f0bc9fbc1fb27cd52b0612161f52d9906d29bb5d5d8f79e2932b2b75cb064736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a592146100eb578063741bef1a14610116578063dc0d3dff14610141578063e667b0bf1461017e57610083565b80632489cf531461008d5780633ccfd60b146100975780633e47d6f3146100ae57610083565b36610083576100816101a9565b005b61008b6101a9565b005b6100956101a9565b005b3480156100a357600080fd5b506100ac6102da565b005b3480156100ba57600080fd5b506100d560048036038101906100d091906107ac565b61051c565b6040516100e291906109a2565b60405180910390f35b3480156100f757600080fd5b50610100610534565b60405161010d91906109a2565b60405180910390f35b34801561012257600080fd5b5061012b610539565b6040516101389190610947565b60405180910390f35b34801561014d57600080fd5b50610168600480360381019061016391906107d9565b61055d565b604051610175919061092c565b60405180910390f35b34801561018a57600080fd5b5061019361059c565b6040516101a0919061092c565b60405180910390f35b60326101de60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b101561021f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021690610982565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d191906109d9565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561040c5760006001828154811061038557610384610c5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040390610bb6565b91509050610362565b50600067ffffffffffffffff81111561042857610427610c8c565b5b6040519080825280602002602001820160405280156104565781602001602082028036833780820191505090505b506001908051906020019061046c92919061069c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049390610917565b60006040518083038185875af1925050503d80600081146104d0576040519150601f19603f3d011682016040523d82523d6000602084013e6104d5565b606091505b5050905080610519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051090610962565b60405180910390fd5b50565b60026020528060005260406000206000915090505481565b603281565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061056d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806105cc836105fc565b90506000670de0b6b3a764000085836105e59190610aca565b6105ef9190610a99565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190610806565b5050509150506402540be400816106949190610a2f565b915050919050565b828054828255906000526020600020908101928215610715579160200282015b828111156107145782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106bc565b5b5090506107229190610726565b5090565b5b8082111561073f576000816000905550600101610727565b5090565b60008135905061075281610d15565b92915050565b60008151905061076781610d2c565b92915050565b60008135905061077c81610d43565b92915050565b60008151905061079181610d43565b92915050565b6000815190506107a681610d5a565b92915050565b6000602082840312156107c2576107c1610cbb565b5b60006107d084828501610743565b91505092915050565b6000602082840312156107ef576107ee610cbb565b5b60006107fd8482850161076d565b91505092915050565b600080600080600060a0868803121561082257610821610cbb565b5b600061083088828901610797565b955050602061084188828901610758565b945050604061085288828901610782565b935050606061086388828901610782565b925050608061087488828901610797565b9150509295509295909350565b61088a81610b24565b82525050565b61089981610b80565b82525050565b60006108ac600b836109c8565b91506108b782610cc0565b602082019050919050565b60006108cf6000836109bd565b91506108da82610ce9565b600082019050919050565b60006108f26012836109c8565b91506108fd82610cec565b602082019050919050565b61091181610b60565b82525050565b6000610922826108c2565b9150819050919050565b60006020820190506109416000830184610881565b92915050565b600060208201905061095c6000830184610890565b92915050565b6000602082019050818103600083015261097b8161089f565b9050919050565b6000602082019050818103600083015261099b816108e5565b9050919050565b60006020820190506109b76000830184610908565b92915050565b600081905092915050565b600082825260208201905092915050565b60006109e482610b60565b91506109ef83610b60565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a2457610a23610bff565b5b828201905092915050565b6000610a3a82610b36565b9150610a4583610b36565b925082610a5557610a54610c2e565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610a8e57610a8d610bff565b5b828205905092915050565b6000610aa482610b60565b9150610aaf83610b60565b925082610abf57610abe610c2e565b5b828204905092915050565b6000610ad582610b60565b9150610ae083610b60565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b1957610b18610bff565b5b828202905092915050565b6000610b2f82610b40565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610b8b82610b92565b9050919050565b6000610b9d82610ba4565b9050919050565b6000610baf82610b40565b9050919050565b6000610bc182610b60565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610bf457610bf3610bff565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b50565b7f4d696e696d756d20697320353020555344210000000000000000000000000000600082015250565b610d1e81610b24565b8114610d2957600080fd5b50565b610d3581610b36565b8114610d4057600080fd5b50565b610d4c81610b60565b8114610d5757600080fd5b50565b610d6381610b6a565b8114610d6e57600080fd5b5056fea2646970667358221220dd809f0bc9fbc1fb27cd52b0612161f52d9906d29bb5d5d8f79e2932b2b75cb064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 318,
        "contract": "contracts/FundMeWithLibrary.sol:FundMeWithLibrary",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)102"
      },
      {
        "astId": 341,
        "contract": "contracts/FundMeWithLibrary.sol:FundMeWithLibrary",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 345,
        "contract": "contracts/FundMeWithLibrary.sol:FundMeWithLibrary",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}