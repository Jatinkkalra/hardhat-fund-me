{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMeWithLibrary__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundUSD",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x44e9d2e21188a176d7e005ebb5eb84d5db8cd619818c14d5fa287e5bcfa0e7f5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1039757",
    "logsBloom": "0x
    "blockHash": "0xc446ef66ad3223c48e403d8c9b0ee11cd8ed519e2381164e8233b4ddd63a9cea",
    "transactionHash": "0x44e9d2e21188a176d7e005ebb5eb84d5db8cd619818c14d5fa287e5bcfa0e7f5",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1039757",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "b4d50137fed4e4fa9faaf6a54fe0a0e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMeWithLibrary__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundUSD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Jatin Kalra\",\"details\":\"This contract uses price feeds as library\",\"kind\":\"dev\",\"methods\":{\"fundUSD()\":{\"details\":\"This implements price feeds as our library\"},\"withdraw()\":{\"details\":\"Array and mapping are emptied and call function is used to withdraw\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fundUSD()\":{\"notice\":\"fundUSD() function funds this contract\"},\"withdraw()\":{\"notice\":\"This withdraws the funds from the contract\"}},\"notice\":\"This is a demo funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMeWithLibrary.sol\":\"FundMeWithLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMeWithLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n\\n// Objective:\\n// 1.\\n\\n// Notes:\\n// A.\\n\\n// 2. Imports\\nimport \\\"./PriceConverter(ALibrary).sol\\\";\\n\\n// 3. Error codes // Syntax: error ContractName__ErrorName();\\nerror FundMeWithLibrary__NotOwner();\\n\\n// 4. Interfaces; 5. Libraries; 6. Contracts\\n\\n// Natspec syntax for documentation\\n/** @title A contract for crowd funding\\n * @author Jatin Kalra\\n * @notice This is a demo funding contract\\n * @dev This contract uses price feeds as library\\n */\\ncontract FundMeWithLibrary {\\n    // 6(i). Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // 6(ii). State variables || gas-optimisation is done with them\\n    address[] private s_funders; // Array(1/2)\\n    mapping(address => uint256) private s_addressToAmountFunded; // Mapping(1/2)\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address private immutable i_Owner; // Global variable\\n    AggregatorV3Interface private s_priceFeed; // Global variable\\n\\n    // 6(iii). Events\\n    // 6(iv). Modifiers\\n    // Modifier to ease-up owner process. 2(i)\\n    modifier onlyOwner() {\\n        if (msg.sender != i_Owner) {\\n            revert FundMeWithLibrary__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    //  6.v.1. constructor\\n    constructor(address priceFeedAddress) {\\n        //PriceFeedAddress paramater to easily change chains\\n        i_Owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    //  6.v.2. receive\\n    receive() external payable {\\n        fundUSD();\\n    }\\n\\n    //  6.v.3. fallback\\n    fallback() external payable {\\n        fundUSD();\\n    }\\n\\n    //  6.v.4. external\\n    //  6.v.5. public\\n\\n    /**\\n     * @notice fundUSD() function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fundUSD() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Minimum is 50 USD!\\\"\\n        );\\n        s_funders.push(msg.sender); // Array(2/2)\\n        s_addressToAmountFunded[msg.sender] += msg.value; // Mapping(2/2)\\n    }\\n\\n    // 2. Withdraw funds\\n\\n    /**\\n     * @notice This withdraws the funds from the contract\\n     * @dev Array and mapping are emptied and call function is used to withdraw\\n     */\\n    function withdraw() public payable onlyOwner {\\n        // Resetting mapping\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++ /*ie funderIndex = funderIndex + 1*/\\n        ) {\\n            /* starting index, ending index, step amount */\\n            address funder = s_funders[funderIndex]; //memory variable\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // Resetting array (instead of looping and deleting, a complete refresh is done)\\n        s_funders = new address[](0);\\n\\n        // Withdraw the funds (3 ways to do)\\n\\n        (bool callSuccess /* bytes memory dataReturned */, ) = payable(\\n            msg.sender\\n        ).call{value: address(this).balance}(\\\"\\\"); // no data taken here\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // Insteading of constantly reading from storage, we convert and read from memory\\n    // mappings can't be in memory\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n\\n        // Resetting mapping\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // Resetting array\\n        s_funders = new address[](0);\\n\\n        // Withdraw the funds\\n        (bool callSuccess /* bytes memory dataReturned */, ) = i_Owner.call{\\n            value: address(this).balance\\n        }(\\\"\\\"); // no data taken here\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // 6.v.6. internal\\n    // 6.v.7. private\\n    // 6.v.8. view / pure (aka getters || getter functions)\\n    function getOwner() public view returns (address) {\\n        return i_Owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xcdaa37497ced7f3d4827f0c992295e098c35f4bee45dc4ecc7c0199bb79d4847\",\"license\":\"MIT\"},\"contracts/PriceConverter(ALibrary).sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// Objective:\\n// Acts as a library for \\\".contracts/FundMeWithLibrary.sol\\\"\\n// Refactoring to modularize our code to be chain-agnostic || `priceFeed` use in parameters\\n\\n// Notes:\\n// AggregatorV3interface is an interface which gets compiled down to an ABI\\n// AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306) is ABI and Address, which makes priceFeed a contract\\n// Global variables are set outside any function and can be called by other contracts via inheritance or library calls.\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    // To fetch the chainlink oracle price of ETH/USD Sepolia\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10); // Price feed gives 10 decimal places || type-casting to uint256 for uniformity.\\n    }\\n\\n    // To convert msg.value in USD price\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Ex: 3000 = ETH/USD price; ethAmount = 2_000000000000000000 = 2*1e18\\n        uint256 ethPrice = getPrice(priceFeed); // 3000_000000000000000000\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // (3000_000000000000000000 * 2_000000000000000000) / 1e18\\n        return ethAmountInUsd; // 6000_000000000000000000\\n    }\\n\\n    // just to check if the interface is imported correctly\\n    // function getPriceDecimals() internal view returns (uint256){\\n    //     // AggregatorV3Interface as a type here\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\\n    //     return priceFeed.decimals();\\n    // }\\n}\\n\",\"keccak256\":\"0x371eeae09176f1ebbb91dc296b5a6dfaecc2a3aa02429323b413f269a5530b2a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012f9380380620012f98339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c611173620001866000396000818161033701528181610586015281816105d601526107cc01526111736000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101145780639e87a5cd1461013f578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780632489cf53146100d55780633ccfd60b146100df5780636b69a592146100e95761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610acb565b6102ec565b6040516100cc9190610cc1565b60405180910390f35b6100dd6101b1565b005b6100e7610335565b005b3480156100f557600080fd5b506100fe610575565b60405161010b9190610cc1565b60405180910390f35b34801561012057600080fd5b50610129610582565b6040516101369190610c4b565b60405180910390f35b34801561014b57600080fd5b506101546105aa565b6040516101619190610c66565b60405180910390f35b6101726105d4565b005b34801561018057600080fd5b5061019b60048036038101906101969190610af8565b610898565b6040516101a89190610c4b565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108df90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610ca1565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102e39190610cf8565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ba576040517fc4ae201400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104655760008082815481106103df576103de611029565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045d90610f82565b9150506103bd565b50600067ffffffffffffffff81111561048157610480611058565b5b6040519080825280602002602001820160405280156104af5781602001602082028036833780820191505090505b50600090805190602001906104c59291906109bb565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ec90610c36565b60006040518083038185875af1925050503d8060008114610529576040519150601f19603f3d011682016040523d82523d6000602084013e61052e565b606091505b5050905080610572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056990610c81565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610659576040517fc4ae201400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106dc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610692575b5050505050905060005b815181101561076757600082828151811061070457610703611029565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075f90610f82565b9150506106e6565b50600067ffffffffffffffff81111561078357610782611058565b5b6040519080825280602002602001820160405280156107b15781602001602082028036833780820191505090505b50600090805190602001906107c79291906109bb565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080e90610c36565b60006040518083038185875af1925050503d806000811461084b576040519150601f19603f3d011682016040523d82523d6000602084013e610850565b606091505b5050905080610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088b90610c81565b60405180910390fd5b5050565b60008082815481106108ad576108ac611029565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108eb8361091b565b90506000670de0b6b3a764000085836109049190610e96565b61090e9190610d4e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c9190610b25565b5050509150506402540be400816109b39190610d7f565b915050919050565b828054828255906000526020600020908101928215610a34579160200282015b82811115610a335782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109db565b5b509050610a419190610a45565b5090565b5b80821115610a5e576000816000905550600101610a46565b5090565b600081359050610a71816110e1565b92915050565b600081519050610a86816110f8565b92915050565b600081359050610a9b8161110f565b92915050565b600081519050610ab08161110f565b92915050565b600081519050610ac581611126565b92915050565b600060208284031215610ae157610ae0611087565b5b6000610aef84828501610a62565b91505092915050565b600060208284031215610b0e57610b0d611087565b5b6000610b1c84828501610a8c565b91505092915050565b600080600080600060a08688031215610b4157610b40611087565b5b6000610b4f88828901610ab6565b9550506020610b6088828901610a77565b9450506040610b7188828901610aa1565b9350506060610b8288828901610aa1565b9250506080610b9388828901610ab6565b9150509295509295909350565b610ba981610ef0565b82525050565b610bb881610f4c565b82525050565b6000610bcb600b83610ce7565b9150610bd68261108c565b602082019050919050565b6000610bee600083610cdc565b9150610bf9826110b5565b600082019050919050565b6000610c11601283610ce7565b9150610c1c826110b8565b602082019050919050565b610c3081610f2c565b82525050565b6000610c4182610be1565b9150819050919050565b6000602082019050610c606000830184610ba0565b92915050565b6000602082019050610c7b6000830184610baf565b92915050565b60006020820190508181036000830152610c9a81610bbe565b9050919050565b60006020820190508181036000830152610cba81610c04565b9050919050565b6000602082019050610cd66000830184610c27565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d0382610f2c565b9150610d0e83610f2c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4357610d42610fcb565b5b828201905092915050565b6000610d5982610f2c565b9150610d6483610f2c565b925082610d7457610d73610ffa565b5b828204905092915050565b6000610d8a82610f02565b9150610d9583610f02565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dd457610dd3610fcb565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e1157610e10610fcb565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e4e57610e4d610fcb565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e8b57610e8a610fcb565b5b828202905092915050565b6000610ea182610f2c565b9150610eac83610f2c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee557610ee4610fcb565b5b828202905092915050565b6000610efb82610f0c565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f5782610f5e565b9050919050565b6000610f6982610f70565b9050919050565b6000610f7b82610f0c565b9050919050565b6000610f8d82610f2c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fc057610fbf610fcb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b50565b7f4d696e696d756d20697320353020555344210000000000000000000000000000600082015250565b6110ea81610ef0565b81146110f557600080fd5b50565b61110181610f02565b811461110c57600080fd5b50565b61111881610f2c565b811461112357600080fd5b50565b61112f81610f36565b811461113a57600080fd5b5056fea2646970667358221220a2db9cf12a8c6b2a3eb4bc8e37585bbdcd4bc716bba3aabbb5c2d5bfa18835a564736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101145780639e87a5cd1461013f578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780632489cf53146100d55780633ccfd60b146100df5780636b69a592146100e95761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610acb565b6102ec565b6040516100cc9190610cc1565b60405180910390f35b6100dd6101b1565b005b6100e7610335565b005b3480156100f557600080fd5b506100fe610575565b60405161010b9190610cc1565b60405180910390f35b34801561012057600080fd5b50610129610582565b6040516101369190610c4b565b60405180910390f35b34801561014b57600080fd5b506101546105aa565b6040516101619190610c66565b60405180910390f35b6101726105d4565b005b34801561018057600080fd5b5061019b60048036038101906101969190610af8565b610898565b6040516101a89190610c4b565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108df90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610ca1565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102e39190610cf8565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ba576040517fc4ae201400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104655760008082815481106103df576103de611029565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045d90610f82565b9150506103bd565b50600067ffffffffffffffff81111561048157610480611058565b5b6040519080825280602002602001820160405280156104af5781602001602082028036833780820191505090505b50600090805190602001906104c59291906109bb565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ec90610c36565b60006040518083038185875af1925050503d8060008114610529576040519150601f19603f3d011682016040523d82523d6000602084013e61052e565b606091505b5050905080610572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056990610c81565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610659576040517fc4ae201400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106dc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610692575b5050505050905060005b815181101561076757600082828151811061070457610703611029565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075f90610f82565b9150506106e6565b50600067ffffffffffffffff81111561078357610782611058565b5b6040519080825280602002602001820160405280156107b15781602001602082028036833780820191505090505b50600090805190602001906107c79291906109bb565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080e90610c36565b60006040518083038185875af1925050503d806000811461084b576040519150601f19603f3d011682016040523d82523d6000602084013e610850565b606091505b5050905080610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088b90610c81565b60405180910390fd5b5050565b60008082815481106108ad576108ac611029565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108eb8361091b565b90506000670de0b6b3a764000085836109049190610e96565b61090e9190610d4e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c9190610b25565b5050509150506402540be400816109b39190610d7f565b915050919050565b828054828255906000526020600020908101928215610a34579160200282015b82811115610a335782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109db565b5b509050610a419190610a45565b5090565b5b80821115610a5e576000816000905550600101610a46565b5090565b600081359050610a71816110e1565b92915050565b600081519050610a86816110f8565b92915050565b600081359050610a9b8161110f565b92915050565b600081519050610ab08161110f565b92915050565b600081519050610ac581611126565b92915050565b600060208284031215610ae157610ae0611087565b5b6000610aef84828501610a62565b91505092915050565b600060208284031215610b0e57610b0d611087565b5b6000610b1c84828501610a8c565b91505092915050565b600080600080600060a08688031215610b4157610b40611087565b5b6000610b4f88828901610ab6565b9550506020610b6088828901610a77565b9450506040610b7188828901610aa1565b9350506060610b8288828901610aa1565b9250506080610b9388828901610ab6565b9150509295509295909350565b610ba981610ef0565b82525050565b610bb881610f4c565b82525050565b6000610bcb600b83610ce7565b9150610bd68261108c565b602082019050919050565b6000610bee600083610cdc565b9150610bf9826110b5565b600082019050919050565b6000610c11601283610ce7565b9150610c1c826110b8565b602082019050919050565b610c3081610f2c565b82525050565b6000610c4182610be1565b9150819050919050565b6000602082019050610c606000830184610ba0565b92915050565b6000602082019050610c7b6000830184610baf565b92915050565b60006020820190508181036000830152610c9a81610bbe565b9050919050565b60006020820190508181036000830152610cba81610c04565b9050919050565b6000602082019050610cd66000830184610c27565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d0382610f2c565b9150610d0e83610f2c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4357610d42610fcb565b5b828201905092915050565b6000610d5982610f2c565b9150610d6483610f2c565b925082610d7457610d73610ffa565b5b828204905092915050565b6000610d8a82610f02565b9150610d9583610f02565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dd457610dd3610fcb565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e1157610e10610fcb565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e4e57610e4d610fcb565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e8b57610e8a610fcb565b5b828202905092915050565b6000610ea182610f2c565b9150610eac83610f2c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee557610ee4610fcb565b5b828202905092915050565b6000610efb82610f0c565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f5782610f5e565b9050919050565b6000610f6982610f70565b9050919050565b6000610f7b82610f0c565b9050919050565b6000610f8d82610f2c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fc057610fbf610fcb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b50565b7f4d696e696d756d20697320353020555344210000000000000000000000000000600082015250565b6110ea81610ef0565b81146110f557600080fd5b50565b61110181610f02565b811461110c57600080fd5b50565b61111881610f2c565b811461112357600080fd5b50565b61112f81610f36565b811461113a57600080fd5b5056fea2646970667358221220a2db9cf12a8c6b2a3eb4bc8e37585bbdcd4bc716bba3aabbb5c2d5bfa18835a564736f6c63430008070033",
  "devdoc": {
    "author": "Jatin Kalra",
    "details": "This contract uses price feeds as library",
    "kind": "dev",
    "methods": {
      "fundUSD()": {
        "details": "This implements price feeds as our library"
      },
      "withdraw()": {
        "details": "Array and mapping are emptied and call function is used to withdraw"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fundUSD()": {
        "notice": "fundUSD() function funds this contract"
      },
      "withdraw()": {
        "notice": "This withdraws the funds from the contract"
      }
    },
    "notice": "This is a demo funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/FundMeWithLibrary.sol:FundMeWithLibrary",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMeWithLibrary.sol:FundMeWithLibrary",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMeWithLibrary.sol:FundMeWithLibrary",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
