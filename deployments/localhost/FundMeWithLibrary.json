{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMeWithLibrary__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundUSD",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8f994c67e70880e4a9f455a4cddebb20c480a0423cb5320603806f7fcfe7d9e5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "872363",
    "logsBloom": "0x
    "blockHash": "0x12a31dccce79b9bf2fb4846c03b4af306c3d05a3ee34acf86661776b2ab715b0",
    "transactionHash": "0x8f994c67e70880e4a9f455a4cddebb20c480a0423cb5320603806f7fcfe7d9e5",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "872363",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "a6fb6143d35bdcbdf80f6a9d29b07754",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMeWithLibrary__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundUSD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Jatin Kalra\",\"details\":\"This contract uses price feeds as library\",\"kind\":\"dev\",\"methods\":{\"fundUSD()\":{\"details\":\"This implements price feeds as our library\"},\"withdraw()\":{\"details\":\"Array and mapping are emptied and call function is used to withdraw\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fundUSD()\":{\"notice\":\"fundUSD() function funds this contract\"},\"withdraw()\":{\"notice\":\"This withdraws the funds from the contract\"}},\"notice\":\"This is a demo funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMeWithLibrary.sol\":\"FundMeWithLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMeWithLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n\\n// Objective:\\n// 1.\\n\\n// Notes:\\n// A.\\n\\n// 2. Imports\\nimport \\\"./PriceConverter(ALibrary).sol\\\";\\n\\n// 3. Error codes // Syntax: error ContractName__ErrorName();\\nerror FundMeWithLibrary__NotOwner();\\n\\n// 4. Interfaces; 5. Libraries; 6. Contracts\\n\\n// Natspec syntax for documentation\\n/** @title A contract for crowd funding\\n * @author Jatin Kalra\\n * @notice This is a demo funding contract\\n * @dev This contract uses price feeds as library\\n */\\ncontract FundMeWithLibrary {\\n    // 6(i). Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // 6(ii). State variables\\n    address[] public funders; // Array(1/2)\\n    mapping(address => uint256) public addressToAmountFunded; // Mapping(1/2)\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address public immutable i_Owner; // Global variable\\n    AggregatorV3Interface public priceFeed; // Global variable\\n\\n    // 6(iii). Events\\n    // 6(iv). Modifiers\\n    // Modifier to ease-up owner process. 2(i)\\n    modifier onlyOwner() {\\n        if (msg.sender != i_Owner) {\\n            revert FundMeWithLibrary__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    //  6.v.1. constructor\\n    constructor(address priceFeedAddress) {\\n        //PriceFeedAddress paramater to easily change chains\\n        i_Owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    //  6.v.2. receive\\n    receive() external payable {\\n        fundUSD();\\n    }\\n\\n    //  6.v.3. fallback\\n    fallback() external payable {\\n        fundUSD();\\n    }\\n\\n    //  6.v.4. external\\n    //  6.v.5. public\\n\\n    /**\\n     * @notice fundUSD() function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fundUSD() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Minimum is 50 USD!\\\"\\n        );\\n        funders.push(msg.sender); // Array(2/2)\\n        addressToAmountFunded[msg.sender] += msg.value; // Mapping(2/2)\\n    }\\n\\n    // 2. Withdraw funds\\n\\n    /**\\n     * @notice This withdraws the funds from the contract\\n     * @dev Array and mapping are emptied and call function is used to withdraw\\n     */\\n    function withdraw() public onlyOwner {\\n        // Resetting mapping\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex = funderIndex++ /*ie funderIndex + 1*/\\n        ) {\\n            /* starting index, ending index, step amount */\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        // Resetting array (instead of looping and deleting, a complete refresh is done)\\n        funders = new address[](0);\\n\\n        // Withdraw the funds (3 ways to do)\\n\\n        (bool callSuccess /* bytes memory dataReturned */, ) = payable(\\n            msg.sender\\n        ).call{value: address(this).balance}(\\\"\\\"); // no data taken here\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // 6.v.6. internal\\n    // 6.v.7. private\\n    // 6.v.8. view / pure\\n}\\n\",\"keccak256\":\"0xe39be7ee90496ffb827b766ef1230d147b919f2bd253b47140ff5229640eb1e4\",\"license\":\"MIT\"},\"contracts/PriceConverter(ALibrary).sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// Objective:\\n// Acts as a library for \\\".contracts/FundMeWithLibrary.sol\\\"\\n// Refactoring to modularize our code to be chain-agnostic || `priceFeed` use in parameters\\n\\n// Notes:\\n// AggregatorV3interface is an interface which gets compiled down to an ABI\\n// AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306) is ABI and Address, which makes priceFeed a contract\\n// Global variables are set outside any function and can be called by other contracts via inheritance or library calls.\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    // To fetch the chainlink oracle price of ETH/USD Sepolia\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10); // Price feed gives 10 decimal places || type-casting to uint256 for uniformity.\\n    }\\n\\n    // To convert msg.value in USD price\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Ex: 3000 = ETH/USD price; ethAmount = 2_000000000000000000 = 2*1e18\\n        uint256 ethPrice = getPrice(priceFeed); // 3000_000000000000000000\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // (3000_000000000000000000 * 2_000000000000000000) / 1e18\\n        return ethAmountInUsd; // 6000_000000000000000000\\n    }\\n\\n    // just to check if the interface is imported correctly\\n    // function getPriceDecimals() internal view returns (uint256){\\n    //     // AggregatorV3Interface as a type here\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\\n    //     return priceFeed.decimals();\\n    // }\\n}\\n\",\"keccak256\":\"0x371eeae09176f1ebbb91dc296b5a6dfaecc2a3aa02429323b413f269a5530b2a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162000fcf38038062000fcf833981810160405281019061003491906100c7565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610142565b6000815190506100c18161012b565b92915050565b6000602082840312156100dd576100dc610126565b5b60006100eb848285016100b2565b91505092915050565b60006100ff82610106565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610134816100f4565b811461013f57600080fd5b50565b60805160601c610e6762000168600039600081816102e601526105b10152610e676000f3fe6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a592146100eb578063741bef1a14610116578063dc0d3dff14610141578063e667b0bf1461017e57610083565b80632489cf531461008d5780633ccfd60b146100975780633e47d6f3146100ae57610083565b36610083576100816101a9565b005b61008b6101a9565b005b6100956101a9565b005b3480156100a357600080fd5b506100ac6102e4565b005b3480156100ba57600080fd5b506100d560048036038101906100d091906107bf565b610525565b6040516100e291906109b5565b60405180910390f35b3480156100f757600080fd5b5061010061053d565b60405161010d91906109b5565b60405180910390f35b34801561012257600080fd5b5061012b61054a565b604051610138919061095a565b60405180910390f35b34801561014d57600080fd5b50610168600480360381019061016391906107ec565b610570565b604051610175919061093f565b60405180910390f35b34801561018a57600080fd5b506101936105af565b6040516101a0919061093f565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d390919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610995565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102db91906109ec565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610369576040517fc4ae201400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041557600080828154811061038e5761038d610d1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040c90610c76565b9150905061036c565b50600067ffffffffffffffff81111561043157610430610d4c565b5b60405190808252806020026020018201604052801561045f5781602001602082028036833780820191505090505b50600090805190602001906104759291906106af565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049c9061092a565b60006040518083038185875af1925050503d80600081146104d9576040519150601f19603f3d011682016040523d82523d6000602084013e6104de565b606091505b5050905080610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610975565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818154811061058057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806105df8361060f565b90506000670de0b6b3a764000085836105f89190610b8a565b6106029190610a42565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610819565b5050509150506402540be400816106a79190610a73565b915050919050565b828054828255906000526020600020908101928215610728579160200282015b828111156107275782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106cf565b5b5090506107359190610739565b5090565b5b8082111561075257600081600090555060010161073a565b5090565b60008135905061076581610dd5565b92915050565b60008151905061077a81610dec565b92915050565b60008135905061078f81610e03565b92915050565b6000815190506107a481610e03565b92915050565b6000815190506107b981610e1a565b92915050565b6000602082840312156107d5576107d4610d7b565b5b60006107e384828501610756565b91505092915050565b60006020828403121561080257610801610d7b565b5b600061081084828501610780565b91505092915050565b600080600080600060a0868803121561083557610834610d7b565b5b6000610843888289016107aa565b95505060206108548882890161076b565b945050604061086588828901610795565b935050606061087688828901610795565b9250506080610887888289016107aa565b9150509295509295909350565b61089d81610be4565b82525050565b6108ac81610c40565b82525050565b60006108bf600b836109db565b91506108ca82610d80565b602082019050919050565b60006108e26000836109d0565b91506108ed82610da9565b600082019050919050565b60006109056012836109db565b915061091082610dac565b602082019050919050565b61092481610c20565b82525050565b6000610935826108d5565b9150819050919050565b60006020820190506109546000830184610894565b92915050565b600060208201905061096f60008301846108a3565b92915050565b6000602082019050818103600083015261098e816108b2565b9050919050565b600060208201905081810360008301526109ae816108f8565b9050919050565b60006020820190506109ca600083018461091b565b92915050565b600081905092915050565b600082825260208201905092915050565b60006109f782610c20565b9150610a0283610c20565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a3757610a36610cbf565b5b828201905092915050565b6000610a4d82610c20565b9150610a5883610c20565b925082610a6857610a67610cee565b5b828204905092915050565b6000610a7e82610bf6565b9150610a8983610bf6565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ac857610ac7610cbf565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610b0557610b04610cbf565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610b4257610b41610cbf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610b7f57610b7e610cbf565b5b828202905092915050565b6000610b9582610c20565b9150610ba083610c20565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bd957610bd8610cbf565b5b828202905092915050565b6000610bef82610c00565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610c4b82610c52565b9050919050565b6000610c5d82610c64565b9050919050565b6000610c6f82610c00565b9050919050565b6000610c8182610c20565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cb457610cb3610cbf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b50565b7f4d696e696d756d20697320353020555344210000000000000000000000000000600082015250565b610dde81610be4565b8114610de957600080fd5b50565b610df581610bf6565b8114610e0057600080fd5b50565b610e0c81610c20565b8114610e1757600080fd5b50565b610e2381610c2a565b8114610e2e57600080fd5b5056fea26469706673582212202e076fce08bfe77e680055472c497e63a6927c27e137c0004ced5d6acf6afd6764736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a592146100eb578063741bef1a14610116578063dc0d3dff14610141578063e667b0bf1461017e57610083565b80632489cf531461008d5780633ccfd60b146100975780633e47d6f3146100ae57610083565b36610083576100816101a9565b005b61008b6101a9565b005b6100956101a9565b005b3480156100a357600080fd5b506100ac6102e4565b005b3480156100ba57600080fd5b506100d560048036038101906100d091906107bf565b610525565b6040516100e291906109b5565b60405180910390f35b3480156100f757600080fd5b5061010061053d565b60405161010d91906109b5565b60405180910390f35b34801561012257600080fd5b5061012b61054a565b604051610138919061095a565b60405180910390f35b34801561014d57600080fd5b50610168600480360381019061016391906107ec565b610570565b604051610175919061093f565b60405180910390f35b34801561018a57600080fd5b506101936105af565b6040516101a0919061093f565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d390919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610995565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102db91906109ec565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610369576040517fc4ae201400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041557600080828154811061038e5761038d610d1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040c90610c76565b9150905061036c565b50600067ffffffffffffffff81111561043157610430610d4c565b5b60405190808252806020026020018201604052801561045f5781602001602082028036833780820191505090505b50600090805190602001906104759291906106af565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049c9061092a565b60006040518083038185875af1925050503d80600081146104d9576040519150601f19603f3d011682016040523d82523d6000602084013e6104de565b606091505b5050905080610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610975565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818154811061058057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806105df8361060f565b90506000670de0b6b3a764000085836105f89190610b8a565b6106029190610a42565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610819565b5050509150506402540be400816106a79190610a73565b915050919050565b828054828255906000526020600020908101928215610728579160200282015b828111156107275782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106cf565b5b5090506107359190610739565b5090565b5b8082111561075257600081600090555060010161073a565b5090565b60008135905061076581610dd5565b92915050565b60008151905061077a81610dec565b92915050565b60008135905061078f81610e03565b92915050565b6000815190506107a481610e03565b92915050565b6000815190506107b981610e1a565b92915050565b6000602082840312156107d5576107d4610d7b565b5b60006107e384828501610756565b91505092915050565b60006020828403121561080257610801610d7b565b5b600061081084828501610780565b91505092915050565b600080600080600060a0868803121561083557610834610d7b565b5b6000610843888289016107aa565b95505060206108548882890161076b565b945050604061086588828901610795565b935050606061087688828901610795565b9250506080610887888289016107aa565b9150509295509295909350565b61089d81610be4565b82525050565b6108ac81610c40565b82525050565b60006108bf600b836109db565b91506108ca82610d80565b602082019050919050565b60006108e26000836109d0565b91506108ed82610da9565b600082019050919050565b60006109056012836109db565b915061091082610dac565b602082019050919050565b61092481610c20565b82525050565b6000610935826108d5565b9150819050919050565b60006020820190506109546000830184610894565b92915050565b600060208201905061096f60008301846108a3565b92915050565b6000602082019050818103600083015261098e816108b2565b9050919050565b600060208201905081810360008301526109ae816108f8565b9050919050565b60006020820190506109ca600083018461091b565b92915050565b600081905092915050565b600082825260208201905092915050565b60006109f782610c20565b9150610a0283610c20565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a3757610a36610cbf565b5b828201905092915050565b6000610a4d82610c20565b9150610a5883610c20565b925082610a6857610a67610cee565b5b828204905092915050565b6000610a7e82610bf6565b9150610a8983610bf6565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ac857610ac7610cbf565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610b0557610b04610cbf565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610b4257610b41610cbf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610b7f57610b7e610cbf565b5b828202905092915050565b6000610b9582610c20565b9150610ba083610c20565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bd957610bd8610cbf565b5b828202905092915050565b6000610bef82610c00565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610c4b82610c52565b9050919050565b6000610c5d82610c64565b9050919050565b6000610c6f82610c00565b9050919050565b6000610c8182610c20565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cb457610cb3610cbf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b50565b7f4d696e696d756d20697320353020555344210000000000000000000000000000600082015250565b610dde81610be4565b8114610de957600080fd5b50565b610df581610bf6565b8114610e0057600080fd5b50565b610e0c81610c20565b8114610e1757600080fd5b50565b610e2381610c2a565b8114610e2e57600080fd5b5056fea26469706673582212202e076fce08bfe77e680055472c497e63a6927c27e137c0004ced5d6acf6afd6764736f6c63430008070033",
  "devdoc": {
    "author": "Jatin Kalra",
    "details": "This contract uses price feeds as library",
    "kind": "dev",
    "methods": {
      "fundUSD()": {
        "details": "This implements price feeds as our library"
      },
      "withdraw()": {
        "details": "Array and mapping are emptied and call function is used to withdraw"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fundUSD()": {
        "notice": "fundUSD() function funds this contract"
      },
      "withdraw()": {
        "notice": "This withdraws the funds from the contract"
      }
    },
    "notice": "This is a demo funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 320,
        "contract": "contracts/FundMeWithLibrary.sol:FundMeWithLibrary",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 324,
        "contract": "contracts/FundMeWithLibrary.sol:FundMeWithLibrary",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 334,
        "contract": "contracts/FundMeWithLibrary.sol:FundMeWithLibrary",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}