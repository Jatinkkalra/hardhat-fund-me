{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMeWithLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// 1. Pragma\npragma solidity ^0.8.7;\n\n// Objective:\n// 1.\n\n// Notes:\n// A.\n\n// 2. Imports\nimport \"./PriceConverter(ALibrary).sol\";\n\n// 3. Error codes // Syntax: error ContractName__ErrorName();\nerror FundMeWithLibrary__NotOwner();\n\n// 4. Interfaces; 5. Libraries; 6. Contracts\n\n// Natspec syntax for documentation\n/** @title A contract for crowd funding\n * @author Jatin Kalra\n * @notice This is a demo funding contract\n * @dev This contract uses price feeds as library\n */\ncontract FundMeWithLibrary {\n    // 6(i). Type Declarations\n    using PriceConverter for uint256;\n\n    // 6(ii). State variables || gas-optimisation is done with them\n    address[] private s_funders; // Array(1/2)\n    mapping(address => uint256) private s_addressToAmountFunded; // Mapping(1/2)\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address private immutable i_Owner; // Global variable\n    AggregatorV3Interface private s_priceFeed; // Global variable\n\n    // 6(iii). Events\n    // 6(iv). Modifiers\n    // Modifier to ease-up owner process. 2(i)\n    modifier onlyOwner() {\n        if (msg.sender != i_Owner) {\n            revert FundMeWithLibrary__NotOwner();\n        }\n        _;\n    }\n\n    //  6.v.1. constructor\n    constructor(address priceFeedAddress) {\n        //PriceFeedAddress paramater to easily change chains\n        i_Owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    //  6.v.2. receive\n    receive() external payable {\n        fundUSD();\n    }\n\n    //  6.v.3. fallback\n    fallback() external payable {\n        fundUSD();\n    }\n\n    //  6.v.4. external\n    //  6.v.5. public\n\n    /**\n     * @notice fundUSD() function funds this contract\n     * @dev This implements price feeds as our library\n     */\n    function fundUSD() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"Minimum is 50 USD!\"\n        );\n        s_funders.push(msg.sender); // Array(2/2)\n        s_addressToAmountFunded[msg.sender] += msg.value; // Mapping(2/2)\n    }\n\n    // 2. Withdraw funds\n\n    /**\n     * @notice This withdraws the funds from the contract\n     * @dev Array and mapping are emptied and call function is used to withdraw\n     */\n    function withdraw() public payable onlyOwner {\n        // Resetting mapping\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++ /*ie funderIndex = funderIndex + 1*/\n        ) {\n            /* starting index, ending index, step amount */\n            address funder = s_funders[funderIndex]; //memory variable\n            s_addressToAmountFunded[funder] = 0;\n        }\n        // Resetting array (instead of looping and deleting, a complete refresh is done)\n        s_funders = new address[](0);\n\n        // Withdraw the funds (3 ways to do)\n\n        (bool callSuccess /* bytes memory dataReturned */, ) = payable(\n            msg.sender\n        ).call{value: address(this).balance}(\"\"); // no data taken here\n        require(callSuccess, \"Call failed\");\n    }\n\n    // Insteading of constantly reading from storage, we convert and read from memory\n    // mappings can't be in memory\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n\n        // Resetting mapping\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        // Resetting array\n        s_funders = new address[](0);\n\n        // Withdraw the funds\n        (bool callSuccess /* bytes memory dataReturned */, ) = i_Owner.call{\n            value: address(this).balance\n        }(\"\"); // no data taken here\n        require(callSuccess, \"Call failed\");\n    }\n\n    // 6.v.6. internal\n    // 6.v.7. private\n    // 6.v.8. view / pure (aka getters || getter functions)\n    function getOwner() public view returns (address) {\n        return i_Owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(\n        address funder\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter(ALibrary).sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n// Objective:\n// Acts as a library for \".contracts/FundMeWithLibrary.sol\"\n// Refactoring to modularize our code to be chain-agnostic || `priceFeed` use in parameters\n\n// Notes:\n// AggregatorV3interface is an interface which gets compiled down to an ABI\n// AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306) is ABI and Address, which makes priceFeed a contract\n// Global variables are set outside any function and can be called by other contracts via inheritance or library calls.\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    // To fetch the chainlink oracle price of ETH/USD Sepolia\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10); // Price feed gives 10 decimal places || type-casting to uint256 for uniformity.\n    }\n\n    // To convert msg.value in USD price\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        // Ex: 3000 = ETH/USD price; ethAmount = 2_000000000000000000 = 2*1e18\n        uint256 ethPrice = getPrice(priceFeed); // 3000_000000000000000000\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // (3000_000000000000000000 * 2_000000000000000000) / 1e18\n        return ethAmountInUsd; // 6000_000000000000000000\n    }\n\n    // just to check if the interface is imported correctly\n    // function getPriceDecimals() internal view returns (uint256){\n    //     // AggregatorV3Interface as a type here\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\n    //     return priceFeed.decimals();\n    // }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
